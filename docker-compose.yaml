version: "3"

volumes:
  prometheus_data: {}
  grafana_data: {}

services:
  postgres:
    container_name: hge-metadata-pg
    image: ${PG_IMAGE}
    restart: always
    ports:
      - "${PG_PORT}:5432"
    # volumes:
    #   - "db_data:/bitnami/postgresql"
    environment:
      POSTGRESQL_USERNAME: ${PG_USER}
      POSTGRESQL_PASSWORD: ${PG_PASSWORD}
      POSTGRESQL_DATABASE: ${PG_DATABASE}

  graphql-engine:
    container_name: hge
    image: ${HGE_IMAGE}
    ports:
      - "${HGE_PORT}:8080"
    depends_on:
      - postgres
    restart: always
    ## uncomment the auto migration image and volumes to explore the example
    volumes:
      - ./hasura/migrations:/hasura-migrations
      - ./hasura/metadata:/hasura-metadata
    environment:
      ## generate a Hasura Pro Key from the Hasura EE Control Plane for this project and uncomment the below line
      HASURA_GRAPHQL_EE_LICENSE_KEY: ${HGE_EE_LICENSE_KEY}
      HASURA_GRAPHQL_ADMIN_SECRET: ${HGE_ADMIN_SECRET}
      ## The metadata database for this Hasura GraphQL project. Can be changed to a managed postgres instance
      HASURA_GRAPHQL_METADATA_DATABASE_URL: ${HGE_METADATA_DATABASE_URL}
      HGE_DATABASE_URL: ${HGE_DATABASE_URL}

      ## Optional settings:
      ## enable the console served by server
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      ## enable debugging mode. It is recommended to disable this in production
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: ${HGE_ENABLED_LOG_TYPES}
      # HASURA_GRAPHQL_LOG_LEVEL: debug
      HASURA_GRAPHQL_CONSOLE_ASSETS_DIR: "/srv/console-assets"
      # HASURA_GRAPHQL_REDIS_URL: "redis://redis:6379"
      # HASURA_GRAPHQL_RATE_LIMIT_REDIS_URL: "redis://redis:6379"
      # HASURA_GRAPHQL_MAX_CACHE_SIZE: "200"
      # HASURA_GRAPHQL_SERVER_PORT: "8080"
      HASURA_GRAPHQL_ENABLED_APIS: ${HGE_ENABLED_APIS}
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: anonymous
      HASURA_GRAPHQL_SERVICE_NAME: hasura-otel-exporter

      ## enable basic authorization for the Prometheus metrics endpoint
      ## remember to set the secret credential in the Prometheus target config
      # HASURA_GRAPHQL_METRICS_SECRET: ${HGE_METRICS_SECRET}

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  otel-collector:
    container_name: otel-collector
    image: ${OTEL_COLLECTOR_IMAGE}
    volumes:
      - ./otel/otel-collector-config.yaml:/etc/otelcol-contrib/config.yaml
      # - ./otel-example-from-doc.yaml:/etc/otelcol-contrib/config.yaml
    ports:
      - 1888:1888 # pprof extension
      - 8889:8889 # Prometheus exporter metrics
      - 13133:13133 # health_check extension
      - 4317:4317 # OTLP gRPC receiver
      - 4318:4318 # OTLP http receiver
      - 55679:55679 # zpages extension

  prometheus:
    container_name: prometheus
    image: quay.io/prometheus/prometheus:v2.48.1
    command: --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./prometheus/prometheus.yaml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"

  loki:
    container_name: loki
    image: ${LOKI_IMAGE}
    ports:
      - ${LOKI_PORT}:3100
    command: -config.file=/etc/loki/local-config.yaml
    deploy:
      mode: global

  grafana:
    image: ${GRAFANA_IMAGE}
    container_name: grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    ports:
      - "${GRAFANA_PORT}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - ./grafana/provisioning:/etc/grafana/provisioning
